{"version":3,"sources":["store/action-types.ts","store/app/app.ts","store/action.ts","character/hooks/useCharacter/index.ts","components/data/data.tsx","utils.ts","components/content-item/content-item.tsx","components/error/error.tsx","components/content/content.tsx","components/party-item/party-item.tsx","components/party/party.tsx","components/article/article.tsx","init/client.tsx","components/app/app.tsx","index.tsx"],"names":["ActionType","app","createReducer","characters","requestedCharacters","removedCharacters","partyCharacters","partyCharacterBlocks","queryName","searchValue","isLoading","isBadSearch","error","errorData","builder","addCase","state","action","payload","addDefaultCase","ActionCreator","type","queryCharacters","Data","useLazyQuery","getCharacters","loading","data","results","useCharacters","useSelector","dispatch","useDispatch","inputRef","useRef","className","onChange","evt","preventDefault","string","currentSearchValue","current","value","correctSearchValue","charAt","toUpperCase","toLowerCase","slice","length","nameForSearch","variables","filter","name","getData","message","onSubmit","method","ref","placeholder","ContentItem","character","removedCharacterArray","characterCardClickHandler","partyCharactersArray","currentCharacterName","split","toString","previousCharacterName","isNameDuplicate","includes","element","target","tagName","push","splice","onClick","onKeyPress","key","tabIndex","role","newCharacters","item","aria-label","src","image","alt","Error","Content","removedCardsName","map","currentCharacters","id","PartyItem","partyCharacter","partyCharacterBlockName","Party","blockName","Article","client","ApolloClient","uri","App","ApolloProvider","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9d1f25c.chunk.js","sourcesContent":["import { Characters } from '../types/character';\nimport { appearingData } from '../types/basic';\n\nexport const ActionType = {\n  SET_CHARACTERS: 'app/setCharacters',\n  SET_REQUESTED_CHARACTERS: 'app/setRequestedCharacters',\n  SET_REMOVED_CHARACTERS: 'app/setRemovedCharacters',\n  SET_PARTY_CHARACTERS: 'app/setPartyCharacters',\n  SET_PARTY_CHARACTER_BLOCKS: 'app/setPartyCharacterBlocks',\n  SET_QUERY_NAME: 'app/setQueryName',\n  SET_SEARCH_VALUE: 'app/setSearchValue',\n  SET_LOADING: 'app/setLoading',\n  SET_BAD_SEARCH: 'app/setBadSearch',\n  SET_ERROR: 'app/setError',\n  SET_ERROR_DATA: 'app/setErrorData',\n};\n\nexport type CharactersAction = {\n  type: typeof ActionType.SET_CHARACTERS;\n  payload: Characters;\n};\n\nexport type QueryNameAction = {\n  type: typeof ActionType.SET_QUERY_NAME;\n  payload: appearingData<string>;\n};\n\nexport type SearchValueAction = {\n  type: typeof ActionType.SET_SEARCH_VALUE;\n  payload: string;\n};\n\nexport type BadSearchAction = {\n  type: typeof ActionType.SET_BAD_SEARCH;\n  payload: boolean;\n};\n\nexport type LoadingAction = {\n  type: typeof ActionType.SET_LOADING;\n  payload: boolean;\n};\n\nexport type ErrorAction = {\n  type: typeof ActionType.SET_ERROR;\n  payload: appearingData<string>;\n};\n\nexport type ErrorDataAction = {\n  type: typeof ActionType.SET_ERROR_DATA;\n  payload: appearingData<string>;\n};\n\nexport type appActionTypes =\n  | CharactersAction\n  | QueryNameAction\n  | SearchValueAction\n  | BadSearchAction\n  | LoadingAction\n  | ErrorAction\n  | ErrorDataAction;\n","import { createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { ActionType, ErrorAction, ErrorDataAction } from '../action-types';\nimport { Characters } from '../../types/character';\nimport { appearingData } from '../../types/basic';\n\nexport type AppStateTypes = {\n  characters: Characters;\n  requestedCharacters: Characters;\n  removedCharacters: Characters;\n  partyCharacters: Characters;\n  partyCharacterBlocks: string[];\n  queryName: appearingData<string>;\n  searchValue: string;\n  isLoading: boolean;\n  isBadSearch: boolean;\n  error: appearingData<string>;\n  errorData: appearingData<string>;\n};\n\nexport const initialState: AppStateTypes = {\n  characters: [],\n  requestedCharacters: [],\n  removedCharacters: [],\n  partyCharacters: [],\n  partyCharacterBlocks: ['Rick', 'Morty'],\n  queryName: null,\n  searchValue: '',\n  isLoading: false,\n  isBadSearch: false,\n  error: null,\n  errorData: null,\n};\n\nexport const app = createReducer(initialState, (builder): void => {\n  builder\n    .addCase(ActionType.SET_CHARACTERS, (state, action: PayloadAction<Characters>) => {\n      state.characters = action.payload;\n    })\n    .addCase(ActionType.SET_REQUESTED_CHARACTERS, (state, action: PayloadAction<Characters>) => {\n      state.requestedCharacters = action.payload;\n    })\n    .addCase(ActionType.SET_REMOVED_CHARACTERS, (state, action: PayloadAction<Characters>) => {\n      state.removedCharacters = action.payload;\n    })\n    .addCase(ActionType.SET_PARTY_CHARACTERS, (state, action: PayloadAction<Characters>) => {\n      state.partyCharacters = action.payload;\n    })\n    .addCase(ActionType.SET_PARTY_CHARACTER_BLOCKS, (state, action: PayloadAction<string[]>) => {\n      state.partyCharacterBlocks = action.payload;\n    })\n    .addCase(ActionType.SET_QUERY_NAME, (state, action: PayloadAction<appearingData<string>>) => {\n      state.queryName = action.payload;\n    })\n    .addCase(ActionType.SET_SEARCH_VALUE, (state, action: PayloadAction<string>) => {\n      state.searchValue = action.payload;\n    })\n    .addCase(ActionType.SET_LOADING, (state, action: PayloadAction<boolean>) => {\n      state.isBadSearch = action.payload;\n    })\n    .addCase(ActionType.SET_BAD_SEARCH, (state, action: PayloadAction<boolean>) => {\n      state.isBadSearch = action.payload;\n    })\n    .addCase(ActionType.SET_ERROR, (state, action: PayloadAction<appearingData<string>>) => {\n      state.error = action.payload;\n    })\n    .addCase(ActionType.SET_ERROR_DATA, (state, action: PayloadAction<appearingData<string>>) => {\n      state.errorData = action.payload;\n    })\n    // TODO: ?? never\n    .addDefaultCase(() => {});\n});\n\nexport type AppState = ReturnType<typeof app>;\n","// Types\nimport { Characters } from '../types/character';\nimport { appearingData } from '../types/basic';\nimport {\n  ActionType, LoadingAction,\n  CharactersAction,\n  QueryNameAction,\n  SearchValueAction,\n  BadSearchAction,\n  ErrorAction,\n  ErrorDataAction,\n  appActionTypes,\n} from './action-types';\n\nexport const ActionCreator = {\n  setCharacters: (payload: Characters) => ({\n    type: ActionType.SET_CHARACTERS,\n    payload,\n  }),\n  setRequestedCharacters: (payload: Characters) => ({\n    type: ActionType.SET_REQUESTED_CHARACTERS,\n    payload,\n  }),\n  setRemovedCharacters: (payload: Characters) => ({\n    type: ActionType.SET_REMOVED_CHARACTERS,\n    payload,\n  }),\n  setPartyCharacters: (payload: Characters) => ({\n    type: ActionType.SET_PARTY_CHARACTERS,\n    payload,\n  }),\n  setPartyCharacterBlocks: (payload: []) => ({\n    type: ActionType.SET_PARTY_CHARACTER_BLOCKS,\n    payload,\n  }),\n  setQueryName: (payload: QueryNameAction) => ({\n    type: ActionType.SET_QUERY_NAME,\n    payload,\n  }),\n  setSearchValue: (payload: SearchValueAction) => ({\n    type: ActionType.SET_SEARCH_VALUE,\n    payload,\n  }),\n  setLoading: (payload: boolean) => ({\n    type: ActionType.SET_SEARCH_VALUE,\n    payload,\n  }),\n  setBadSearch: (payload: boolean) => ({\n    type: ActionType.SET_BAD_SEARCH,\n    payload,\n  }),\n  setError: (payload: appearingData<string>) => ({\n    type: ActionType.SET_ERROR,\n    payload,\n  }),\n  setErrorData: (payload: appearingData<string>) => ({\n    type: ActionType.SET_ERROR_DATA,\n    payload,\n  }),\n};\n","// Core\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { loader } from 'graphql.macro';\n\n// Queries\nconst queryCharacters = loader('./gql/queryCharacters.graphql');\n\nexport const useCharacters = () => {\n  const [getCharacters, { loading, error, data }] = useLazyQuery(queryCharacters);\n\n  return {\n    getCharacters, loading, error, characters: data && data.characters.results,\n  };\n};\n","// Core\nimport { FC, useRef, FormEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActionCreator } from '../../store/action';\n\n// Utils\nimport { capitalizeFirstLetter } from '../../utils';\n\n// Types\nimport { AppState } from '../../store/app/app';\nimport { appearingData } from '../../types/basic';\n\n// Hooks\nimport { useCharacters } from '../../character/hooks/useCharacter';\nimport { SearchValueAction } from '../../store/action-types';\n\nexport const Data: FC = () => {\n  const {\n    getCharacters, loading, error, characters,\n  } = useCharacters();\n  const { queryName } = useSelector((state: AppState) => state);\n\n  const dispatch = useDispatch();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const getData = () => {\n    const nameForSearch: appearingData<string> = queryName && queryName.toLowerCase();\n\n    return getCharacters({\n      variables: {\n        filter: {\n          name: nameForSearch,\n        },\n      },\n    });\n  };\n\n  const formChangeHandler = (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    const currentSearchValue = inputRef.current && inputRef.current.value;\n    //\n\n    const correctSearchValue: any = currentSearchValue && capitalizeFirstLetter(currentSearchValue);\n    correctSearchValue && dispatch(ActionCreator.setSearchValue(correctSearchValue));\n\n    if (currentSearchValue && currentSearchValue.length >= 2) {\n      getData();\n      dispatch(ActionCreator.setCharacters(characters));\n    }\n\n    error\n      && dispatch(ActionCreator.setBadSearch(true))\n      && dispatch(ActionCreator.setErrorData(error.message));\n    !error && dispatch(ActionCreator.setBadSearch(false));\n\n    loading && dispatch(ActionCreator.setLoading(true));\n    !loading && dispatch(ActionCreator.setLoading(false));\n\n    dispatch(ActionCreator.setQueryName(correctSearchValue));\n  };\n\n  const formSubmitHandler = (evt: FormEvent) => evt.preventDefault();\n\n  return (\n    <section className=\"game__data data\">\n      <form\n        onChange={formChangeHandler}\n        onSubmit={formSubmitHandler}\n        className=\"data__form\"\n        action=\"#\"\n        method=\"post\"\n      >\n        <input\n          ref={inputRef}\n          className=\"data__input\"\n          type=\"text\"\n          placeholder=\"Enter name of character\"\n        />\n      </form>\n    </section>\n  );\n};\n","export const capitalizeFirstLetter = (string: string): string => string.charAt(0).toUpperCase()\n  + string.toLowerCase().slice(1);\n\ntype F = () => void;\n\n// may come in handy in the future\nexport const throttle = (callback: F, limit: number): F => {\n  let wait = false;\n  return function () {\n    if (!wait) {\n      callback();\n      wait = true;\n      setTimeout(() => {\n        wait = false;\n      }, limit);\n    }\n  };\n};\n","// Core\nimport { FC, MouseEvent, KeyboardEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ActionCreator } from '../../store/action';\n\n// Types\nimport { AppState } from '../../store/app/app';\nimport { ICharacter, Characters } from '../../types/character';\n\ntype Props = {\n  characters: Characters;\n  character: ICharacter;\n};\n\nexport const ContentItem: FC<Props> = ({ characters, character }) => {\n  const { partyCharacters, removedCharacters } = useSelector((state: AppState) => state);\n  const dispatch = useDispatch();\n\n  const removedCharacterArray: Characters = removedCharacters.slice();\n\n  const removeButtonClickHandler = () => {\n    const newCharacters: Characters = characters.filter((item: ICharacter) => item !== character);\n    removedCharacterArray.push(character);\n    dispatch(ActionCreator.setCharacters(newCharacters));\n    dispatch(ActionCreator.setRemovedCharacters(removedCharacterArray));\n  };\n\n  const characterCardClickHandler = (\n    evt: MouseEvent<HTMLLIElement> | KeyboardEvent<HTMLLIElement>,\n  ) => {\n    const partyCharactersArray: Characters = partyCharacters.slice();\n    const currentCharacterName = character.name\n      .split(' ')\n      .filter((name: ICharacter['name']) => name === 'Rick' || name === 'Morty')\n      .toString();\n\n    const previousCharacterName = partyCharactersArray[0]\n      ? partyCharactersArray[partyCharactersArray.length - 1].name.split(' ')\n      : null;\n\n    const isNameDuplicate = previousCharacterName\n      && previousCharacterName.includes(currentCharacterName);\n\n    const element = evt.target as HTMLElement;\n    if (element.tagName === 'IMG' || element.tagName === 'LI') {\n      partyCharactersArray.push(character);\n\n      if (isNameDuplicate) {\n        partyCharactersArray.splice(partyCharactersArray.length - 2, 1);\n        dispatch(ActionCreator.setPartyCharacters(partyCharactersArray));\n        return;\n      }\n\n      if (partyCharactersArray.length > 2) {\n        partyCharactersArray.splice(0, 1);\n        dispatch(ActionCreator.setPartyCharacters(partyCharactersArray));\n        return;\n      }\n\n      dispatch(ActionCreator.setPartyCharacters(partyCharactersArray));\n    }\n  };\n\n  const characterCardKeypressHandler = (evt: KeyboardEvent<HTMLLIElement>) => {\n    if (evt.key === 'Enter') {\n      characterCardClickHandler(evt);\n    }\n  };\n\n  const tabIndex = 0;\n\n  return (\n    <li\n      onClick={characterCardClickHandler}\n      onKeyPress={characterCardKeypressHandler}\n      className=\"content__item game__item\"\n      tabIndex={tabIndex}\n      role=\"presentation\"\n    >\n      <button\n        onClick={removeButtonClickHandler}\n        className=\"content__close-button\"\n        aria-label=\"choose character for party\"\n        type=\"button\"\n      />\n      <img className=\"content__img game__img\" src={character.image} alt={character.name} />\n    </li>\n  );\n};\n","// Core\nimport { FC } from 'react';\n\n// Types\nimport { appearingData } from '../../types/basic';\n\ntype Props = {\n  errorData: appearingData<string>;\n};\n\nexport const Error: FC<Props> = ({ errorData }) => (\n  <div className=\"error\">\n    <p className=\"error__data\">\n      {errorData}\n      . Please try again.\n    </p>\n  </div>\n);\n","// Core\nimport { FC, ReactElement } from 'react';\nimport { useSelector } from 'react-redux';\n\n// Components\nimport { ContentItem } from '../content-item/content-item';\nimport { Error } from '../error/error';\n\n// Types\nimport { AppState } from '../../store/app/app';\nimport { Characters, ICharacter } from '../../types/character';\n\nexport const Content: FC = () => {\n  const {\n    characters, removedCharacters, isBadSearch, errorData, isLoading,\n  } = useSelector(\n    (state: AppState) => state,\n  );\n\n  const removedCardsName = removedCharacters.map((item: ICharacter) => item.name);\n\n  const currentCharacters: Characters = characters\n    && characters.filter((item: ICharacter) => !removedCardsName.includes(item.name));\n\n  return (\n    <section className=\"game__content content\">\n      <ul className=\"content__list\">\n        {isLoading && <h3>Loading..</h3>}\n        {isBadSearch && <h3>No results for this search</h3>}\n        {isBadSearch && <Error errorData={errorData} />}\n        {currentCharacters\n          && currentCharacters.map(\n            (character: ICharacter): ReactElement => (\n              <ContentItem key={character.id} characters={characters} character={character} />\n            ),\n          )}\n      </ul>\n    </section>\n  );\n};\n","// Core\nimport { FC } from 'react';\n\n// Types\nimport { ICharacter } from '../../types/character';\n\ntype Props = {\n  partyCharacter: ICharacter;\n  partyCharacterBlockName: string;\n};\n\nexport const PartyItem: FC<Props> = ({ partyCharacter, partyCharacterBlockName }: Props) => (\n  <li className=\"party__item game__item\">\n    {partyCharacter && (\n    <img\n      className=\"party__img game__img\"\n      src={partyCharacter.image}\n      alt={partyCharacter.name}\n    />\n    )}\n    <p className=\"party__name\">{partyCharacterBlockName}</p>\n  </li>\n);\n","// Core\nimport { FC, ReactElement } from 'react';\nimport { useSelector } from 'react-redux';\n\n// Components\nimport { PartyItem } from '../party-item/party-item';\n\n// Types\nimport { AppState } from '../../store/app/app';\nimport { ICharacter } from '../../types/character';\n\nexport const Party: FC = () => {\n  const { partyCharacters, partyCharacterBlocks } = useSelector((state: AppState) => state);\n\n  return (\n    <section className=\"game__party party\">\n      <h2 className=\"party__caption\">Party</h2>\n      <ul className=\"party__list\">\n        {partyCharacterBlocks.map(\n          (blockName, id): ReactElement => (\n            <PartyItem\n              key={blockName}\n              partyCharacterBlockName={blockName}\n              partyCharacter={\n                partyCharacters.filter((item: ICharacter) => item.name.includes(blockName))[0]\n              }\n            />\n          ),\n        )}\n      </ul>\n    </section>\n  );\n};\n","// Core\nimport { FC } from 'react';\n\n// Components\nimport { Data } from '../data/data';\nimport { Content } from '../content/content';\nimport { Party } from '../party/party';\n\nexport const Article: FC = () => (\n  <article className=\"game\">\n    <Data />\n    <Content />\n    <Party />\n  </article>\n);\n","// Core\nimport ApolloClient from 'apollo-boost';\n\n// GraphQL Server\nconst uri = 'https://rickandmortyapi.com/graphql';\n\n// type?\nexport const client: any = new ApolloClient({\n  uri,\n});\n","// Core\nimport { FC } from 'react';\n\n// Components\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Article } from '../article/article';\n\nimport { client } from '../../init/client';\n\nexport const App: FC = () => (\n  <ApolloProvider client={client}>\n    <h1>Rick & Morty</h1>\n    <Article />\n  </ApolloProvider>\n  // <Article />\n);\n","import { FC } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { app as reducer } from './store/app/app';\nimport { App } from './components/app/app';\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(),\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    ,\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}